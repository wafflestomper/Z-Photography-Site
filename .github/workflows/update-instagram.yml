name: Update Instagram Feed

permissions:
  contents: write

on:
  schedule:
    # Runs at 10 AM and 10 PM UTC
    - cron: '0 10,22 * * *'
  # Allows manual triggering from GitHub UI
  workflow_dispatch:

jobs:
  update-feed:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: npm install
      
      - name: Update Instagram feed
        run: node scripts/update-instagram.js
        env:
          INSTAGRAM_ACCESS_TOKEN: ${{ secrets.INSTAGRAM_ACCESS_TOKEN }}
      
      - name: Commit and push if changed
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'actions@github.com'
          git add .
          git commit -m "Update Instagram feed" || exit 0
          git push "https://${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git" HEAD:main 

      - name: Debug - Check Secrets
        run: |
          echo "Checking if secrets are available..."
          if [ -n "${{ secrets.DREAMHOST_HOST }}" ]; then
            echo "DREAMHOST_HOST is set"
          else
            echo "DREAMHOST_HOST is not set"
          fi
          if [ -n "${{ secrets.DREAMHOST_USERNAME }}" ]; then
            echo "DREAMHOST_USERNAME is set"
          else
            echo "DREAMHOST_USERNAME is not set"
          fi
          if [ -n "${{ secrets.DREAMHOST_SSH_KEY }}" ]; then
            echo "DREAMHOST_SSH_KEY is set"
          else
            echo "DREAMHOST_SSH_KEY is not set"
          fi

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DREAMHOST_SSH_KEY }}

      - name: Debug - Check SSH
        run: |
          echo "Checking SSH configuration..."
          ssh-add -l
          echo "Testing SSH connection..."
          ssh -v -o StrictHostKeyChecking=no ${{ secrets.DREAMHOST_USERNAME }}@${{ secrets.DREAMHOST_HOST }} 'echo "SSH connection successful"'

      - name: Deploy to DreamHost
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DREAMHOST_USERNAME }}@${{ secrets.DREAMHOST_HOST }} /bin/bash <<'ENDSSH'
            cd /home/brizol || exit 1
            
            # Install nvm if not present
            if [ ! -d "$HOME/.nvm" ]; then
              echo "Installing nvm..."
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            fi
            
            # Load nvm
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            
            # Install and use Node.js
            nvm install 20
            nvm use 20
            
            # Backup existing site if it exists
            timestamp=$(date +%Y%m%d_%H%M%S)
            if [ -d "z-photography.com" ]; then
              echo "Backing up existing site..."
              if [ ! -d "backups" ]; then
                mkdir backups
              fi
              # Only backup important data files
              if [ -d "z-photography.com/data" ]; then
                echo "Backing up data directory..."
                mkdir -p backups/z-photography_${timestamp}
                cp -r z-photography.com/data backups/z-photography_${timestamp}/
              fi
              
              # Remove existing directory to prepare for fresh clone
              rm -rf z-photography.com
            fi
            
            # Fresh clone of the repository
            echo "Cloning fresh repository..."
            git clone https://github.com/wafflestomper/Z-Photography-Site.git z-photography.com
            
            # Enter the directory
            cd z-photography.com || exit 1
            
            # Restore backed up data if it exists
            if [ -d "../backups/z-photography_${timestamp}/data" ]; then
              echo "Restoring data from backup..."
              cp -r ../backups/z-photography_${timestamp}/data/* data/
            fi
            
            # Install dependencies and build
            npm install
            INSTAGRAM_ACCESS_TOKEN=${{ secrets.INSTAGRAM_ACCESS_TOKEN }} npm run build
          ENDSSH
