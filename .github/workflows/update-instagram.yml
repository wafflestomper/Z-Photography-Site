name: Update Instagram Feed

permissions:
  contents: write

on:
  schedule:
    # Runs at 10 AM and 10 PM UTC
    - cron: '0 10,22 * * *'
  # Allows manual triggering from GitHub UI
  workflow_dispatch:

jobs:
  update-feed:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ github.token }}
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: npm install
      
      - name: Update Instagram feed
        run: node scripts/update-instagram.js
        env:
          INSTAGRAM_ACCESS_TOKEN: ${{ secrets.INSTAGRAM_ACCESS_TOKEN }}
      
      - name: Commit and push if changed
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          git commit -m "Update Instagram feed" || exit 0
          git push

      - name: Debug - Check Secrets
        run: |
          echo "Checking if secrets are available..."
          if [ -n "${{ secrets.DREAMHOST_HOST }}" ]; then
            echo "DREAMHOST_HOST is set"
          else
            echo "DREAMHOST_HOST is not set"
          fi
          if [ -n "${{ secrets.DREAMHOST_USERNAME }}" ]; then
            echo "DREAMHOST_USERNAME is set"
          else
            echo "DREAMHOST_USERNAME is not set"
          fi
          if [ -n "${{ secrets.DREAMHOST_SSH_KEY }}" ]; then
            echo "DREAMHOST_SSH_KEY is set"
          else
            echo "DREAMHOST_SSH_KEY is not set"
          fi

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DREAMHOST_SSH_KEY }}

      - name: Debug - Check SSH
        run: |
          echo "Checking SSH configuration..."
          ssh-add -l
          echo "Testing SSH connection..."
          ssh -v -o StrictHostKeyChecking=no ${{ secrets.DREAMHOST_USERNAME }}@${{ secrets.DREAMHOST_HOST }} 'echo "SSH connection successful"'

      - name: Deploy to DreamHost
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DREAMHOST_USERNAME }}@${{ secrets.DREAMHOST_HOST }} /bin/bash <<'ENDSSH'
            set -e  # Exit immediately if a command fails
            set -x  # Enable verbose debugging
            
            echo "Starting deployment process..."
            cd /home/brizol || exit 1
            
            # Ensure NVM is loaded
            export NVM_DIR="$HOME/.nvm"
            if [ -s "$NVM_DIR/nvm.sh" ]; then
              . "$NVM_DIR/nvm.sh" # Source NVM script
            else
              echo "NVM not found, attempting to install..."
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
              export NVM_DIR="$HOME/.nvm" # Re-export after install
              # Re-source NVM script after install
              [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            fi

            # Install and use Node.js
            echo "Attempting to install and use Node 18..."
            nvm install 18
            nvm use 18
            
            # Verify versions
            echo "NVM current: $(nvm current || echo 'NVM not available')"
            echo "Node version: $(node -v || echo 'Node not available')"
            echo "NPM version: $(npm -v || echo 'NPM not available')"

            # Backup existing site data if it exists
            timestamp=$(date +%Y%m%d_%H%M%S)
            mkdir -p backups
            
            if [ -d "z-photography.com/data" ]; then
              echo "Backing up data directory..."
              mkdir -p backups/z-photography_${timestamp}
              cp -r z-photography.com/data backups/z-photography_${timestamp}/
              echo "Data backup completed"
            else
              echo "No data directory found to backup"
            fi
            
            # Remove the entire website directory
            echo "Removing existing website directory..."
            rm -rf z-photography.com
            
            # Fresh clone of the repository
            echo "Cloning fresh repository..."
            git clone https://github.com/wafflestomper/Z-Photography-Site.git z-photography.com
            
            # Enter the directory
            cd z-photography.com || exit 1
            echo "Now in $(pwd)"
            
            # Restore backed up data if it exists
            if [ -d "../backups/z-photography_${timestamp}/data" ]; then
              echo "Restoring data from backup..."
              # Make sure the data directory exists
              mkdir -p data
              cp -r ../backups/z-photography_${timestamp}/data/* data/
              echo "Data restored from backup"
            fi
            
            # Install dependencies and build
            echo "Installing dependencies..."
            npm cache clean --force
            npm ci
            echo "Building the project..."
            INSTAGRAM_ACCESS_TOKEN=${{ secrets.INSTAGRAM_ACCESS_TOKEN }} npm run build
            echo "Deployment completed successfully"
            set +x # Disable verbose debugging
          ENDSSH
